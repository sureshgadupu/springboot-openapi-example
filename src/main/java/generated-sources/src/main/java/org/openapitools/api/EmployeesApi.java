/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Employee;
import org.openapitools.model.ErrorResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-26T00:53:16.090385300+13:00[Pacific/Auckland]")
@Validated
@Tag(name = "employees", description = "the employees API")
public interface EmployeesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /employees : Create a Employee
     *
     * @param employee  (optional)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "createEmployee",
        summary = "Create a Employee",
        tags = { "employees" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Employee.class))
            }),
            @ApiResponse(responseCode = "200", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/employees",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Employee> _createEmployee(
        @Parameter(name = "Employee", description = "") @Valid @RequestBody(required = false) Employee employee
    ) {
        return createEmployee(employee);
    }

    // Override this method
    default  ResponseEntity<Employee> createEmployee(Employee employee) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Department\" : { \"name\" : \"name\", \"id\" : 6, \"employees\" : [ null, null ] }, \"gender\" : \"M\", \"birth_date\" : \"2000-01-23\", \"last_name\" : \"last_name\", \"id\" : 0, \"hire_date\" : \"2000-01-23\", \"first_name\" : \"first_name\" }";
                    org.openapitools.api.ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /employees/{id} : Delete Employee By Id
     *
     * @param id The id of the Employee to delete (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteEmployee",
        summary = "Delete Employee By Id",
        tags = { "employees" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request"),
            @ApiResponse(responseCode = "200", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/employees/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> _deleteEmployee(
        @Parameter(name = "id", description = "The id of the Employee to delete", required = true) @PathVariable("id") Long id
    ) {
        return deleteEmployee(id);
    }

    // Override this method
    default  ResponseEntity<Void> deleteEmployee(Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /employees/{id} : Info for a specific Employee
     *
     * @param id The id of the Employee to retrieve (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "getEmployeeById",
        summary = "Info for a specific Employee",
        tags = { "employees" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Employee.class))
            }),
            @ApiResponse(responseCode = "200", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employees/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Employee> _getEmployeeById(
        @Parameter(name = "id", description = "The id of the Employee to retrieve", required = true) @PathVariable("id") Long id
    ) {
        return getEmployeeById(id);
    }

    // Override this method
    default  ResponseEntity<Employee> getEmployeeById(Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Department\" : { \"name\" : \"name\", \"id\" : 6, \"employees\" : [ null, null ] }, \"gender\" : \"M\", \"birth_date\" : \"2000-01-23\", \"last_name\" : \"last_name\", \"id\" : 0, \"hire_date\" : \"2000-01-23\", \"first_name\" : \"first_name\" }";
                    org.openapitools.api.ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /employees : List all employees
     *
     * @param limit How many items to return at one time (max 100) (optional)
     * @return A paged array of employees (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "listEmployees",
        summary = "List all employees",
        tags = { "employees" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A paged array of employees", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Employee.class))
            }),
            @ApiResponse(responseCode = "200", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employees",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Employee>> _listEmployees(
        @Parameter(name = "limit", description = "How many items to return at one time (max 100)") @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        return listEmployees(limit);
    }

    // Override this method
    default  ResponseEntity<List<Employee>> listEmployees(Integer limit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Department\" : { \"name\" : \"name\", \"id\" : 6, \"employees\" : [ null, null ] }, \"gender\" : \"M\", \"birth_date\" : \"2000-01-23\", \"last_name\" : \"last_name\", \"id\" : 0, \"hire_date\" : \"2000-01-23\", \"first_name\" : \"first_name\" }";
                    org.openapitools.api.ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
